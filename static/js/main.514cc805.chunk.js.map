{"version":3,"sources":["Task/Task.js","TaskInput/TaskInput.js","App.js","reportWebVitals.js","index.js"],"names":["Task","title","done","toggleHandler","removeHandler","taskStatusClass","taskStatusIcon","faSquare","faCheckSquare","className","type","onClick","icon","faTrashAlt","TaskInput","onSubmitHandler","taskInput","React","createRef","onSubmit","event","preventDefault","current","value","trim","placeholder","ref","faPlus","App","useState","tasksState","setTasksState","taskGenerator","task","id","index","findIndex","tasks","taskToggleHandler","splice","taskRemoveHandler","todoTasks","filter","map","doneTasks","taskTitle","newTaskId","length","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTA6BeA,EAtBF,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,cACnCC,EAAkB,YAClBC,EAAiBC,IAOrB,OALIL,IACAG,EAAkB,YAClBC,EAAiBE,KAIjB,sBAAKC,UAAWJ,EAAhB,UACI,wBAAQK,KAAK,SAASD,UAAU,SAASE,QAASR,EAAlD,SACI,cAAC,IAAD,CAAiBS,KAAMN,MAE3B,qBAAKG,UAAU,aAAf,SAA6BR,IAC7B,wBAAQS,KAAK,SAASD,UAAU,SAASE,QAASP,EAAlD,SACI,cAAC,IAAD,CAAiBQ,KAAMC,Y,gBCExBC,EApBG,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACZC,EAAYC,IAAMC,YAStB,OACI,uBAAMT,UAAU,aAAaU,SARZ,SAACC,GAClBA,EAAMC,iBACFL,EAAUM,QAAQC,OAASP,EAAUM,QAAQC,MAAMC,QACnDT,EAAgBC,EAAUM,QAAQC,OACtCP,EAAUM,QAAQC,MAAQ,IAI1B,UACI,uBAAOb,KAAK,OAAOD,UAAU,QAAQgB,YAAY,uBAAuBC,IAAKV,IAC7E,wBAAQN,KAAK,SAASD,UAAU,SAAhC,SACI,cAAC,IAAD,CAAiBG,KAAMe,YCuCxBC,G,MApDH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACPC,EADO,KACKC,EADL,KA4BRC,EAAgB,SAACC,GACnB,OACI,cAAC,EAAD,CAEI/B,KAAM+B,EAAK/B,KACXD,MAAOgC,EAAKhC,MACZE,cAAe,kBA/BD,SAAC+B,GACvB,IAAMC,EAAQL,EAAWM,WAAU,SAAAH,GAAI,OAAIA,EAAKC,KAAOA,KACjDD,EAAI,eAAOH,EAAWK,IAC5BF,EAAK/B,MAAQ+B,EAAK/B,KAClB,IAAMmC,EAAK,YAAOP,GAClBO,EAAMF,GAASF,EACfF,EAAcM,GAyBeC,CAAkBL,EAAKC,KAC5C9B,cAAe,kBAvBD,SAAC8B,GACvB,IAAMC,EAAQL,EAAWM,WAAU,SAAAH,GAAI,OAAIA,EAAKC,KAAOA,KACjDG,EAAK,YAAOP,GAClBO,EAAME,OAAOJ,EAAO,GACpBJ,EAAcM,GAmBeG,CAAkBP,EAAKC,MAJvCD,EAAKC,KAQlBO,EAAYX,EAAWY,QAAO,SAAAT,GAAI,OAAKA,EAAK/B,QAAMyC,IAAIX,GACtDY,EAAYd,EAAWY,QAAO,SAAAT,GAAI,OAAIA,EAAK/B,QAAMyC,IAAIX,GAEzD,OACI,sBAAKvB,UAAU,MAAf,UACI,cAAC,EAAD,CAAWM,gBAzBA,SAAC8B,GAChB,IAAMR,EAAK,YAAOP,GACZgB,EAA6B,IAAjBT,EAAMU,OAClBV,EAAM,GAAGH,GAAK,EACd,EACNG,EAAMW,QAAQ,CAACd,GAAIY,EAAW7C,MAAO4C,EAAW3C,MAAM,IACtD6B,EAAcM,MAoBTI,EACD,uBACCG,OCzCEK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.514cc805.chunk.js","sourcesContent":["import React from 'react';\nimport './Task.scss'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faCheckSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons\";\n\nconst Task = ({title, done, toggleHandler, removeHandler}) => {\n    let taskStatusClass = \"task todo\";\n    let taskStatusIcon = faSquare;\n\n    if (done) {\n        taskStatusClass = \"task done\";\n        taskStatusIcon = faCheckSquare;\n    }\n\n    return (\n        <div className={taskStatusClass}>\n            <button type=\"button\" className=\"status\" onClick={toggleHandler}>\n                <FontAwesomeIcon icon={taskStatusIcon}/>\n            </button>\n            <div className=\"task-title\">{title}</div>\n            <button type=\"button\" className=\"remove\" onClick={removeHandler}>\n                <FontAwesomeIcon icon={faTrashAlt}/>\n            </button>\n        </div>\n    )\n};\n\nexport default Task;","import React from 'react';\nimport './TaskInput.scss';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\n\nconst TaskInput = ({onSubmitHandler}) => {\n    let taskInput = React.createRef();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if (taskInput.current.value && taskInput.current.value.trim())\n            onSubmitHandler(taskInput.current.value);\n        taskInput.current.value = '';\n    };\n\n    return (\n        <form className=\"task-input\" onSubmit={onFormSubmit}>\n            <input type=\"text\" className=\"input\" placeholder=\"Inser a task here...\" ref={taskInput}/>\n            <button type=\"submit\" className=\"submit\">\n                <FontAwesomeIcon icon={faPlus}/>\n            </button>\n        </form>\n    );\n};\n\nexport default TaskInput;","import {useState} from \"react\";\nimport Task from \"./Task/Task\";\nimport TaskInput from \"./TaskInput/TaskInput\";\n\nimport './App.scss';\n\nconst App = () => {\n    const [tasksState, setTasksState] = useState([])\n\n    const taskToggleHandler = (id) => {\n        const index = tasksState.findIndex(task => task.id === id);\n        const task = {...tasksState[index]};\n        task.done = !task.done;\n        const tasks = [...tasksState];\n        tasks[index] = task;\n        setTasksState(tasks);\n    }\n\n    const taskRemoveHandler = (id) => {\n        const index = tasksState.findIndex(task => task.id === id);\n        const tasks = [...tasksState];\n        tasks.splice(index, 1);\n        setTasksState(tasks);\n    }\n\n    const addNewTask = (taskTitle) => {\n        const tasks = [...tasksState];\n        const newTaskId = tasks.length !== 0\n            ? tasks[0].id + 1\n            : 0;\n        tasks.unshift({id: newTaskId, title: taskTitle, done: false});\n        setTasksState(tasks);\n    };\n\n    const taskGenerator = (task) => {\n        return (\n            <Task\n                key={task.id}\n                done={task.done}\n                title={task.title}\n                toggleHandler={() => taskToggleHandler(task.id)}\n                removeHandler={() => taskRemoveHandler(task.id)}/>\n        );\n    };\n\n    let todoTasks = tasksState.filter(task => !task.done).map(taskGenerator);\n    let doneTasks = tasksState.filter(task => task.done).map(taskGenerator);\n\n    return (\n        <div className=\"App\">\n            <TaskInput onSubmitHandler={addNewTask}/>\n            {todoTasks}\n            <hr/>\n            {doneTasks}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}