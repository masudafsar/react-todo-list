{"version":3,"sources":["Task/Task.js","TaskItem/TaskItem.js","App.js","reportWebVitals.js","index.js"],"names":["Task","title","done","toggleHandler","removeHandler","taskStatusClass","taskStatusIcon","faSquare","faCheckSquare","className","type","onClick","icon","faTrashAlt","TaskItem","task","this","props","i","Name","t","Boolean","idTask","toString","id","for","Component","App","useState","tasksState","setTasksState","map","index","tasks","taskToggleHandler","splice","taskRemoveHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTA6BeA,EAtBF,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,cACnCC,EAAkB,YAClBC,EAAiBC,IAOrB,OALIL,IACAG,EAAkB,YAClBC,EAAiBE,KAIjB,sBAAKC,UAAWJ,EAAhB,UACI,wBAAQK,KAAK,SAASD,UAAU,SAASE,QAASR,EAAlD,SACI,cAAC,IAAD,CAAiBS,KAAMN,MAE3B,qBAAKG,UAAU,aAAf,SAA6BR,IAC7B,wBAAQS,KAAK,SAASD,UAAU,SAASE,QAASP,EAAlD,SACI,cAAC,IAAD,CAAiBQ,KAAMC,Y,8CCwBxBC,E,4JA3CX,WACI,IAAMC,EAAOC,KAAKC,MAAMF,KACpBG,EAAI,EACFC,EAAO,WACT,IAAK,IAAMC,KAAKL,EAAKd,MAAO,CACxB,GAAIoB,QAAQD,GAAI,CACZ,IAAIE,EAAS,OAGb,OADAA,MADAJ,GACYK,WAER,qBAAKd,UAAU,YAAf,SACI,oBAAIA,UAAU,gBAAd,SACI,6BACI,oBAAGA,UAAU,kBAAb,UACI,uBAAOC,KAAK,WAAWD,UAAU,uBAAuBe,GAAIF,IAC5D,uBAAOb,UAAU,uBAAuBgB,IAAKH,IAC5CP,EAAKd,eAO1B,OACI,0BAQhB,OACI,cAACkB,EAAD,Q,GAnCWO,aCkDRC,G,MA7CH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACPC,EADO,KACKC,EADL,KAyBFD,EAAWE,KAAI,SAAChB,EAAMiB,GAC9B,OACI,cAAC,EAAD,CAEI9B,KAAMa,EAAKb,KACXD,MAAOc,EAAKd,MACZE,cAAe,kBA5BD,SAAC6B,GACvB,IAAMjB,EAAI,eAAOc,EAAWG,IAC5BjB,EAAKb,MAAQa,EAAKb,KAClB,IAAM+B,EAAK,YAAOJ,GAClBI,EAAMD,GAASjB,EACfe,EAAcG,GAuBeC,CAAkBF,IACvC5B,cAAe,kBArBD,SAAC4B,GAEvB,IAAMC,EAAK,YAAOJ,GAClBI,EAAME,OAAOH,EAAO,GAEpBF,EAAcG,GAgBeG,CAAkBJ,KAJlCA,MAQjB,OACI,qBAAKvB,UAAU,MAAf,SAGI,cAAC,EAAD,CAAUM,KAAMc,QCnCbQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.23e68d1e.chunk.js","sourcesContent":["import React from 'react';\nimport './Task.scss'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faCheckSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons\";\n\nconst Task = ({title, done, toggleHandler, removeHandler}) => {\n    let taskStatusClass = \"task todo\";\n    let taskStatusIcon = faSquare;\n\n    if (done) {\n        taskStatusClass = \"task done\";\n        taskStatusIcon = faCheckSquare;\n    }\n\n    return (\n        <div className={taskStatusClass}>\n            <button type=\"button\" className=\"status\" onClick={toggleHandler}>\n                <FontAwesomeIcon icon={taskStatusIcon}/>\n            </button>\n            <div className=\"task-title\">{title}</div>\n            <button type=\"button\" className=\"remove\" onClick={removeHandler}>\n                <FontAwesomeIcon icon={faTrashAlt}/>\n            </button>\n        </div>\n    )\n};\n\nexport default Task;","import React, {Component} from 'react';\n\nclass TaskItem extends Component {\n\n    render() {\n        const task = this.props.task;\n        let i = 0;\n        const Name = () => {\n            for (const t in task.title) {\n                if (Boolean(t)) {\n                    let idTask = \"task\";\n                    i++;\n                    idTask += i.toString();\n                    return (\n                        <div className=\"todo-list\">\n                            <ul className=\"list-unstyled\">\n                                <li>\n                                    <a className=\"custom-checkbox\">\n                                        <input type=\"checkbox\" className=\"custom-control-input\" id={idTask}/>\n                                        <label className=\"custom-control-label\" for={idTask}></label>\n                                        {task.title}\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div>\n\n                        </div>\n\n                    )\n                }\n            }\n        }\n        return (\n            <Name/>\n            // <tr>\n            //   <Link to={`/tasks/${task.id}`}>\n            //     {task.name}\n            //   </Link>\n            // </tr>\n        );\n    }\n}\n\nexport default TaskItem;\n","import {useState} from \"react\";\nimport Task from \"./Task/Task\";\nimport TaskInput from \"./TaskInput/TaskInput\";\nimport TaskItem from \"./TaskItem/TaskItem\";\n\nimport './App.scss';\n\nconst App = () => {\n    const [tasksState, setTasksState] = useState([])\n\n    const taskToggleHandler = (index) => {\n        const task = {...tasksState[index]};\n        task.done = !task.done;\n        const tasks = [...tasksState];\n        tasks[index] = task;\n        setTasksState(tasks);\n    }\n\n    const taskRemoveHandler = (index) => {\n        // const task = {...tasksState[index]};\n        const tasks = [...tasksState];\n        tasks.splice(index, 1);\n        // tasks[index] = task;\n        setTasksState(tasks);\n    }\n\n    const addNewTask = (taskTitle) => {\n        const tasks = [...tasksState];\n        tasks.unshift({title: taskTitle, done: false});\n        setTasksState(tasks);\n    };\n\n    let tasks = tasksState.map((task, index) => {\n        return (\n            <Task\n                key={index}\n                done={task.done}\n                title={task.title}\n                toggleHandler={() => taskToggleHandler(index)}\n                removeHandler={() => taskRemoveHandler(index)}/>\n        );\n    });\n\n    return (\n        <div className=\"App\">\n            {/*<TaskInput onSubmitHandler={addNewTask}/>*/}\n            {/*{tasks}*/}\n            <TaskItem task={tasksState}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}