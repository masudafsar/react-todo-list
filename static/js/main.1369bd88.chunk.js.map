{"version":3,"sources":["components/TaskInput/TaskInput.module.scss","containers/App/App.module.scss","components/Task/Task.js","components/TaskInput/TaskInput.js","components/CollapsiblePanel/CollapsiblePanel.js","containers/App/App.js","reportWebVitals.js","index.js","components/Task/Task.module.scss","components/CollapsiblePanel/CollapsiblePanel.module.scss"],"names":["module","exports","Task","taskStatusIcon","title","done","toggleHandler","removeHandler","taskStatusClass","styleClasses","push","Done","faCheckSquare","Todo","faSquare","className","join","type","Status","onClick","icon","TaskTitle","Remove","faTrashAlt","TaskInput","onSubmitHandler","taskInputRef","useRef","onSubmit","event","preventDefault","current","value","trim","focus","Input","placeholder","ref","Submit","faPlus","CollapsiblePanel","props","render","handleMessage","handleIcon","faCaretDown","contentClass","Content","content","state","expand","faCaretUp","Show","children","length","Handle","toggleStatusHandler","setState","prevState","Component","app","todoTasks","tasks","filter","task","map","taskGenerator","doneTasks","App","addNewTask","taskToggleHandler","id","index","findIndex","taskRemoveHandler","splice","taskTitle","newTaskId","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1369bd88.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskInput\":\"TaskInput_TaskInput__1NFbr\",\"Input\":\"TaskInput_Input__3qb4p\",\"Submit\":\"TaskInput_Submit__1x5rJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__37HFC\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faCheckSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons\";\n\nimport styleClasses from './Task.module.scss'\n\nconst Task = ({title, done, toggleHandler, removeHandler}) => {\n    let taskStatusClass = [styleClasses.Task];\n    let taskStatusIcon;\n\n    if (done) {\n        taskStatusClass.push(styleClasses.Done);\n        taskStatusIcon = faCheckSquare;\n    } else {\n        taskStatusClass.push(styleClasses.Todo);\n        taskStatusIcon = faSquare;\n    }\n\n    return (\n        <div className={taskStatusClass.join(' ')}>\n            <button\n                type=\"button\"\n                className={styleClasses.Status}\n                onClick={toggleHandler}>\n                <FontAwesomeIcon icon={taskStatusIcon}/>\n            </button>\n            <div className={styleClasses.TaskTitle}>{title}</div>\n            <button\n                type=\"button\"\n                className={styleClasses.Remove}\n                onClick={removeHandler}>\n                <FontAwesomeIcon icon={faTrashAlt}/>\n            </button>\n        </div>\n    )\n};\n\nTask.propTypes = {\n    title: PropTypes.string,\n    done: PropTypes.bool,\n    toggleHandler: PropTypes.func,\n    removeHandler: PropTypes.func,\n};\n\nexport default Task;\n","import React, {useRef} from 'react';\n// import PropTypes from \"prop-types\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\n\nimport styleClasses from './TaskInput.module.scss';\n\nconst TaskInput = ({onSubmitHandler}) => {\n    let taskInputRef = useRef(null);\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if (taskInputRef.current.value && taskInputRef.current.value.trim())\n            onSubmitHandler(taskInputRef.current.value);\n        taskInputRef.current.value = '';\n        taskInputRef.current.focus();\n    };\n\n    return (\n        <form className={styleClasses.TaskInput} onSubmit={onFormSubmit}>\n            <input\n                type=\"text\"\n                className={styleClasses.Input}\n                placeholder=\"Insert a task here...\"\n                ref={taskInputRef}/>\n            <button type=\"submit\" className={styleClasses.Submit}>\n                <FontAwesomeIcon icon={faPlus}/>\n            </button>\n        </form>\n    );\n};\n\n// TaskInput.propTypes = {\n//     onSubmitHandler: PropTypes.func,\n// };\n\nexport default TaskInput;\n","import React, {Component} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCaretDown, faCaretUp} from \"@fortawesome/free-solid-svg-icons\";\n\nimport styleClasses from './CollapsiblePanel.module.scss'\n\nclass CollapsiblePanel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: false\n        };\n    }\n\n    render = () => {\n        let handleMessage = 'Show completed tasks';\n        let handleIcon = faCaretDown;\n        let contentClass = [styleClasses.Content];\n        let content = null;\n\n        if (this.state.expand) {\n            handleMessage = 'Hide completed tasks';\n            handleIcon = faCaretUp;\n            contentClass.push(styleClasses.Show);\n        }\n\n        if (this.props.children.length !== 0) {\n            content = (\n                <div className={styleClasses.CollapsiblePanel}>\n                    <button\n                        type=\"button\"\n                        className={styleClasses.Handle}\n                        onClick={this.toggleStatusHandler}>\n                        <FontAwesomeIcon icon={handleIcon}/>\n                        <span>{handleMessage}</span>\n                        <FontAwesomeIcon icon={handleIcon}/>\n                    </button>\n                    <div className={contentClass.join(' ')}>\n                        {this.props.children}\n                    </div>\n                </div>\n            );\n        }\n\n        return content;\n    }\n\n    toggleStatusHandler = () => {\n        this.setState((prevState, props) => {\n            return {expand: !prevState.expand};\n        });\n    };\n}\n\nexport default CollapsiblePanel;\n","import React, {Component} from \"react\";\nimport Task from \"../../components/Task/Task\";\nimport TaskInput from \"../../components/TaskInput/TaskInput\";\nimport CollapsiblePanel from \"../../components/CollapsiblePanel/CollapsiblePanel\";\n\nimport styleClasses from './App.module.scss';\n\nclass app extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n        };\n    }\n\n    render = () => {\n        let todoTasks = this.state.tasks.filter(task => !task.done).map(this.taskGenerator);\n        let doneTasks = this.state.tasks.filter(task => task.done).map(this.taskGenerator);\n\n        return (\n            <div className={styleClasses.App}>\n                <TaskInput onSubmitHandler={this.addNewTask}/>\n                {todoTasks}\n                <CollapsiblePanel>\n                    {doneTasks}\n                </CollapsiblePanel>\n            </div>\n        );\n    }\n\n    taskToggleHandler = (id) => {\n        const index = this.state.tasks.findIndex(task => task.id === id);\n        const task = {...this.state.tasks[index]};\n        task.done = !task.done;\n        const tasks = [...this.state.tasks];\n        tasks[index] = task;\n        this.setState({tasks: tasks});\n    }\n\n    taskRemoveHandler = (id) => {\n        const index = this.state.tasks.findIndex(task => task.id === id);\n        const tasks = [...this.state.tasks];\n        tasks.splice(index, 1);\n        this.setState({tasks: tasks});\n    }\n\n    addNewTask = (taskTitle) => {\n        const tasks = [...this.state.tasks];\n        const newTaskId = tasks.length !== 0\n            ? tasks[0].id + 1\n            : 0;\n        tasks.unshift({id: newTaskId, title: taskTitle, done: false});\n        this.setState({tasks: tasks});\n    };\n\n    taskGenerator = (task) => {\n        return (\n            <Task\n                key={task.id}\n                done={task.done}\n                title={task.title}\n                toggleHandler={() => this.taskToggleHandler(task.id)}\n                removeHandler={() => this.taskRemoveHandler(task.id)}/>\n        );\n    };\n}\n\nexport default app;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__2WFHk\",\"TaskTitle\":\"Task_TaskTitle__Jzh11\",\"Status\":\"Task_Status__I03yK\",\"Remove\":\"Task_Remove__2nrnB\",\"Done\":\"Task_Done__3Z9w0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CollapsiblePanel\":\"CollapsiblePanel_CollapsiblePanel__2Zwfi\",\"Handle\":\"CollapsiblePanel_Handle__30aEJ\",\"Content\":\"CollapsiblePanel_Content__34t77\",\"Show\":\"CollapsiblePanel_Show__1B7yC\"};"],"sourceRoot":""}