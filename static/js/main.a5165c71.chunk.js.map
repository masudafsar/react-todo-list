{"version":3,"sources":["TaskInput/TaskInput.module.scss","App.module.scss","Task/Task.js","TaskInput/TaskInput.js","CollapsiblePanel/CollapsiblePanel.js","App.js","reportWebVitals.js","index.js","Task/Task.module.scss","CollapsiblePanel/CollapsiblePanel.module.scss"],"names":["module","exports","Task","taskStatusIcon","title","done","toggleHandler","removeHandler","taskStatusClass","styleClasses","push","Done","faCheckSquare","Todo","faSquare","className","join","type","Status","onClick","icon","TaskTitle","Remove","faTrashAlt","TaskInput","onSubmitHandler","taskInput","React","createRef","onSubmit","event","preventDefault","current","value","trim","Input","placeholder","ref","Submit","faPlus","CollapsiblePanel","children","useState","status","setStatus","handleMessage","handleIcon","faCaretDown","contentClass","Content","content","faCaretUp","Show","length","Handle","App","tasksState","setTasksState","taskGenerator","task","id","index","findIndex","tasks","taskToggleHandler","splice","taskRemoveHandler","todoTasks","filter","map","doneTasks","taskTitle","newTaskId","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5165c71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskInput\":\"TaskInput_TaskInput__3suSG\",\"Input\":\"TaskInput_Input__2CpTt\",\"Submit\":\"TaskInput_Submit__2mNco\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","import React from 'react';\nimport styleClasses from './Task.module.scss'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faCheckSquare} from \"@fortawesome/free-regular-svg-icons\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons\";\n\nconst Task = ({title, done, toggleHandler, removeHandler}) => {\n    let taskStatusClass = [styleClasses.Task];\n    let taskStatusIcon;\n\n    if (done) {\n        taskStatusClass.push(styleClasses.Done);\n        taskStatusIcon = faCheckSquare;\n    } else {\n        taskStatusClass.push(styleClasses.Todo);\n        taskStatusIcon = faSquare;\n    }\n\n    return (\n        <div className={taskStatusClass.join(' ')}>\n            <button type=\"button\" className={styleClasses.Status} onClick={toggleHandler}>\n                <FontAwesomeIcon icon={taskStatusIcon}/>\n            </button>\n            <div className={styleClasses.TaskTitle}>{title}</div>\n            <button type=\"button\" className={styleClasses.Remove} onClick={removeHandler}>\n                <FontAwesomeIcon icon={faTrashAlt}/>\n            </button>\n        </div>\n    )\n};\n\nexport default Task;","import React from 'react';\nimport styleClasses from './TaskInput.module.scss';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\n\nconst TaskInput = ({onSubmitHandler}) => {\n    let taskInput = React.createRef();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if (taskInput.current.value && taskInput.current.value.trim())\n            onSubmitHandler(taskInput.current.value);\n        taskInput.current.value = '';\n    };\n\n    return (\n        <form className={styleClasses.TaskInput} onSubmit={onFormSubmit}>\n            <input type=\"text\" className={styleClasses.Input} placeholder=\"Insert a task here...\" ref={taskInput}/>\n            <button type=\"submit\" className={styleClasses.Submit}>\n                <FontAwesomeIcon icon={faPlus}/>\n            </button>\n        </form>\n    );\n};\n\nexport default TaskInput;","import React, {useState} from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCaretDown, faCaretUp} from \"@fortawesome/free-solid-svg-icons\";\n\nimport styleClasses from './CollapsiblePanel.module.scss'\n\nconst CollapsiblePanel = ({children}) => {\n    const [status, setStatus] = useState(false);\n\n    const toggleStatusHandler = () => {\n        setStatus(!status);\n    };\n\n    let handleMessage = 'Show completed tasks';\n    let handleIcon = faCaretDown;\n    let contentClass = [styleClasses.Content];\n    let content = null;\n\n    if (status) {\n        handleMessage = 'Hide completed tasks';\n        handleIcon = faCaretUp;\n        contentClass.push(styleClasses.Show);\n    }\n\n    if (children.length !== 0) {\n        content = (\n            <div className={styleClasses.CollapsiblePanel}>\n                <button type=\"button\" className={styleClasses.Handle} onClick={toggleStatusHandler}>\n                    <FontAwesomeIcon icon={handleIcon}/>\n                    <span>{handleMessage}</span>\n                    <FontAwesomeIcon icon={handleIcon}/>\n                </button>\n                <div className={contentClass.join(' ')}>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n\n    return content;\n};\n\nexport default CollapsiblePanel;\n","import {useState} from \"react\";\nimport Task from \"./Task/Task\";\nimport TaskInput from \"./TaskInput/TaskInput\";\nimport CollapsiblePanel from \"./CollapsiblePanel/CollapsiblePanel\";\n\nimport styleClasses from './App.module.scss';\n\nconst App = () => {\n    const [tasksState, setTasksState] = useState([])\n\n    const taskToggleHandler = (id) => {\n        const index = tasksState.findIndex(task => task.id === id);\n        const task = {...tasksState[index]};\n        task.done = !task.done;\n        const tasks = [...tasksState];\n        tasks[index] = task;\n        setTasksState(tasks);\n    }\n\n    const taskRemoveHandler = (id) => {\n        const index = tasksState.findIndex(task => task.id === id);\n        const tasks = [...tasksState];\n        tasks.splice(index, 1);\n        setTasksState(tasks);\n    }\n\n    const addNewTask = (taskTitle) => {\n        const tasks = [...tasksState];\n        const newTaskId = tasks.length !== 0\n            ? tasks[0].id + 1\n            : 0;\n        tasks.unshift({id: newTaskId, title: taskTitle, done: false});\n        setTasksState(tasks);\n    };\n\n    const taskGenerator = (task) => {\n        return (\n            <Task\n                key={task.id}\n                done={task.done}\n                title={task.title}\n                toggleHandler={() => taskToggleHandler(task.id)}\n                removeHandler={() => taskRemoveHandler(task.id)}/>\n        );\n    };\n\n    let todoTasks = tasksState.filter(task => !task.done).map(taskGenerator);\n    let doneTasks = tasksState.filter(task => task.done).map(taskGenerator);\n\n    return (\n        <div className={styleClasses.App}>\n            <TaskInput onSubmitHandler={addNewTask}/>\n            {todoTasks}\n            <CollapsiblePanel>\n                {doneTasks}\n            </CollapsiblePanel>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__2rY5Z\",\"TaskTitle\":\"Task_TaskTitle__YeU1b\",\"Status\":\"Task_Status__3PuLh\",\"Remove\":\"Task_Remove__1q3RB\",\"Done\":\"Task_Done__FubB6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CollapsiblePanel\":\"CollapsiblePanel_CollapsiblePanel__27Sx8\",\"Handle\":\"CollapsiblePanel_Handle__1cg5P\",\"Content\":\"CollapsiblePanel_Content__1ZLHU\",\"Show\":\"CollapsiblePanel_Show__3v_bP\"};"],"sourceRoot":""}