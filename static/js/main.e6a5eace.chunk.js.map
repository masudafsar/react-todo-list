{"version":3,"sources":["Task/Task.js","TaskInput/TaskInput.js","App.js","reportWebVitals.js","index.js"],"names":["Task","title","done","toggleHandler","taskStatusClass","className","onClick","TaskInput","onSubmitHandler","taskInput","React","createRef","onSubmit","event","preventDefault","current","value","trim","type","placeholder","ref","App","useState","tasksState","setTasksState","tasks","map","task","index","taskToggleHandler","taskTitle","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAeeA,G,YAZF,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,cACpBC,EAAkB,YAGtB,OAFIF,IAAME,EAAkB,aAGxB,sBAAKC,UAAWD,EAAhB,UACI,qBAAKC,UAAU,aAAf,SAA6BJ,IAC7B,qBAAKI,UAAU,SAASC,QAASH,SCW9BI,G,MAlBG,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACZC,EAAYC,IAAMC,YAStB,OACI,uBAAMN,UAAU,aAAaO,SARZ,SAACC,GAClBA,EAAMC,iBACFL,EAAUM,QAAQC,OAASP,EAAUM,QAAQC,MAAMC,QACnDT,EAAgBC,EAAUM,QAAQC,OACtCP,EAAUM,QAAQC,MAAQ,IAI1B,UACI,uBAAOE,KAAK,OAAOb,UAAU,QAAQc,YAAY,uBAAuBC,IAAKX,IAC7E,wBAAQS,KAAK,SAASb,UAAU,SAAhC,sBCwBGgB,EAnCH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACPC,EADO,KACKC,EADL,KAiBVC,EAAQF,EAAWG,KAAI,SAACC,EAAMC,GAC9B,OACI,cAAC,EAAD,CAEI1B,KAAMyB,EAAKzB,KACXD,MAAO0B,EAAK1B,MACZE,cAAe,kBApBD,SAACyB,GACvB,IAAMD,EAAI,eAAOJ,EAAWK,IAC5BD,EAAKzB,MAAQyB,EAAKzB,KAClB,IAAMuB,EAAK,YAAOF,GAClBE,EAAMG,GAASD,EACfH,EAAcC,GAeeI,CAAkBD,KAHlCA,MAOjB,OACI,sBAAKvB,UAAU,MAAf,UACI,cAAC,EAAD,CAAWG,gBAlBA,SAACsB,GAChB,IAAML,EAAK,YAAOF,GAClBE,EAAMM,QAAQ,CAAC9B,MAAO6B,EAAW5B,MAAM,IACvCsB,EAAcC,MAgBTA,MCvBEO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6a5eace.chunk.js","sourcesContent":["import React from 'react';\nimport './Task.css'\n\nconst Task = ({title, done, toggleHandler}) => {\n    let taskStatusClass = \"task todo\";\n    if (done) taskStatusClass = \"task done\";\n\n    return (\n        <div className={taskStatusClass}>\n            <div className=\"task-title\">{title}</div>\n            <div className=\"status\" onClick={toggleHandler}/>\n        </div>\n    )\n};\n\nexport default Task;","import React from 'react';\nimport './TaskInput.css';\n\nconst TaskInput = ({onSubmitHandler}) => {\n    let taskInput = React.createRef();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if (taskInput.current.value && taskInput.current.value.trim())\n            onSubmitHandler(taskInput.current.value);\n        taskInput.current.value = '';\n    };\n\n    return (\n        <form className=\"task-input\" onSubmit={onFormSubmit}>\n            <input type=\"text\" className=\"input\" placeholder=\"Inser a task here...\" ref={taskInput}/>\n            <button type=\"submit\" className=\"submit\">Add</button>\n        </form>\n    );\n};\n\nexport default TaskInput;","import './App.css';\nimport {useState} from \"react\";\nimport Task from \"./Task/Task\";\nimport TaskInput from \"./TaskInput/TaskInput\";\n\nconst App = () => {\n    const [tasksState, setTasksState] = useState([])\n\n    const taskToggleHandler = (index) => {\n        const task = {...tasksState[index]};\n        task.done = !task.done;\n        const tasks = [...tasksState];\n        tasks[index] = task;\n        setTasksState(tasks);\n    }\n\n    const addNewTask = (taskTitle) => {\n        const tasks = [...tasksState];\n        tasks.unshift({title: taskTitle, done: false});\n        setTasksState(tasks);\n    };\n\n    let tasks = tasksState.map((task, index) => {\n        return (\n            <Task\n                key={index}\n                done={task.done}\n                title={task.title}\n                toggleHandler={() => taskToggleHandler(index)}/>\n        );\n    });\n\n    return (\n        <div className=\"App\">\n            <TaskInput onSubmitHandler={addNewTask}/>\n            {tasks}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}